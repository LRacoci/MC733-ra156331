/******************************************************
 * This is the main file for the mips1 ArchC model    *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/

// Rodolfo editou aqui
//
const char *project_name="mips";
const char *project_file="mips1.ac";
const char *archc_version="2.0beta1";
const char *archc_options="-abi -dy ";

#include <stdio.h>
#include <systemc.h>
#include "mips.H"
#include "memory.h"
#include "peripheral.h"
#include "bus.h"

//#define NUM_PROCS 2

int sc_main(int ac, char *av[])
{
  /*
  int i;
  mips mips_proc[NUM_PROCS];
  for(i = 0; i < NUM_PROCS; i++){
    char name[] = "mips256";
    sprintf(name, "mips%d", i+1);
    mips_proc[i] (name);
  }
  */

  //!  ISA simulator
  mips mips_proc1("mips1");
  mips mips_proc2("mips2");
  mips mips_proc3("mips3");
  mips mips_proc4("mips4");
  /*
  */

  //! Bus
  ac_tlm_bus bus("bus");
  // Memory
  ac_tlm_mem mem("mem");
  // Peripheral
  ac_tlm_peripheral peripheral("peripheral");

#ifdef AC_DEBUG
  /*
  for(i = 0; i < NUM_PROCS; i++){
    char name[] = "mips1_proc256.trace";
    sprintf(name, "mips1_proc%d.trace", i+1);
    ac_trace(name);
  }
  */

  ac_trace("mips1_proc1.trace");
  ac_trace("mips1_proc2.trace");
  ac_trace("mips1_proc3.trace");
  ac_trace("mips1_proc4.trace");
  /*
  */
  
#endif
  /*

  for(i = 0; i < NUM_PROCS; i++){
    mips_proc[i].DM(bus.target_export);
  }


  */
  
  mips_proc1.DM(bus.target_export);
  mips_proc2.DM(bus.target_export);
  mips_proc3.DM(bus.target_export);
  mips_proc4.DM(bus.target_export);
  /*
  */
  

  bus.MEM_port(mem.target_export);
  bus.PERIPHERAL_port(peripheral.target_export);

  /*
  


  for(i = 0; i < NUM_PROCS; i++){

    char** av_i = (char**) malloc(ac*sizeof(char**));
    memcpy (av_i, av, ac*sizeof(char**));

    mips_proc[i].init(ac, av_i);
    mips_proc[i].set_prog_args();
    cerr << endl;
  }



  */

  char** av1 = (char**) malloc(ac*sizeof(char**));
  memcpy (av1, av, ac*sizeof(char**));

  mips_proc1.init(ac, av1);
  mips_proc1.set_prog_args();
  cerr << endl;
  char** av2 = (char**) malloc(ac*sizeof(char**));
  memcpy (av2, av, ac*sizeof(char**));

  mips_proc2.init(ac, av2);
  mips_proc2.set_prog_args();
  cerr << endl;

  char** av3 = (char**) malloc(ac*sizeof(char**));
  memcpy (av3, av, ac*sizeof(char**));

  mips_proc3.init(ac, av3);
  mips_proc3.set_prog_args();
  cerr << endl;

  char** av4 = (char**) malloc(ac*sizeof(char**));
  memcpy (av4, av, ac*sizeof(char**));

  mips_proc4.init(ac, av4);
  mips_proc4.set_prog_args();
  cerr << endl;
  /*
  */
  
  
  sc_start();

  mips_proc1.PrintStat();
  cerr << endl;
  mips_proc2.PrintStat();
  cerr << endl;
  mips_proc3.PrintStat();
  cerr << endl;
  mips_proc4.PrintStat();

  cerr << endl;

#ifdef AC_STATS
  mips1_proc1.ac_sim_stats.time = sc_simulation_time();
  mips1_proc1.ac_sim_stats.print();
  mips1_proc2.ac_sim_stats.time = sc_simulation_time();
  mips1_proc2.ac_sim_stats.print();
  mips1_proc3.ac_sim_stats.time = sc_simulation_time();
  mips1_proc3.ac_sim_stats.print();
  mips1_proc4.ac_sim_stats.time = sc_simulation_time();
  mips1_proc4.ac_sim_stats.print();
#endif

#ifdef AC_DEBUG
  ac_close_trace();
#endif

  return mips_proc1.ac_exit_status;
}
